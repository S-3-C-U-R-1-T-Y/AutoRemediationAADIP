{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workflows_AutoRemediation_name": {
            "defaultValue": "AutoRemediation",
            "type": "String"
        },
        "functionAppName": {
            "defaultValue": "AppSecretKVRotate",
            "type": "String",
            "metadata": {
              "description": "The name of the Azure Function app."
            }
          },
          "packageUri": {
            "type": "String",
            "defaultValue": "https://secidentityvc.blob.core.windows.net/riskremediationfun/AppSecretsRotateKV.zip",
            "metadata": {
              "description": "The zip content url."
            }
          },
        "connections_office365_name": {
            "defaultValue": "office365",
            "type": "String"
        },
        "connections_eventhubs_name": {
            "defaultValue": "eventhubs",
            "type": "String"
        },
        "connections_github_name": {
            "defaultValue": "github",
            "type": "String"
        }
    },
    "variables": {
        "hostingPlanName": "[parameters('functionAppName')]",
        "applicationInsightsName": "[parameters('functionAppName')]",
        "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-02-01",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
              "name": "Standard_LRS"
            },
            "kind": "Storage"
          },
          {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2021-02-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[resourceGroup().location]",
            "sku": {
              "name": "Y1",
              "tier": "Dynamic",
              "size": "Y1",
              "family": "Y"
            },
            "properties": {
              "computeMode": "Dynamic"
            }
          },
          {
            "type": "microsoft.insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('applicationInsightsName')]",
            "location": "[resourceGroup().location]",
            "tags": {
              "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
            },
            "kind": "web",
            "properties": {
              "Application_Type": "web"
            }
          },
          {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-02-01",
            "name": "[parameters('functionAppName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            ],
            "kind": "functionapp",
            "identity": {
              "type": "SystemAssigned"
            },
            "properties": {
              "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
              "siteConfig": {
                "appSettings": [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
                  },
                  {
                    "name": "AzureWebJobsStorage",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                  },
                  {
                    "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                  },
                  {
                    "name": "WEBSITE_CONTENTSHARE",
                    "value": "[toLower(parameters('functionAppName'))]"
                  },
                  {
                    "name": "FUNCTIONS_EXTENSION_VERSION",
                    "value": "~4"
                  },
                  {
                    "name": "FUNCTIONS_WORKER_RUNTIME",
                    "value": "powershell"
                  },
                  {
                    "name": "WEBSITE_RUN_FROM_PACKAGE",
                    "value": "1"
                  }
                ]
              }
            },
            "resources": [
              {
                "type": "extensions",
                "apiVersion": "2021-02-01",
                "name": "zipdeploy",
                "dependsOn": [
                  "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
                ],
                "properties": {
                  "packageUri": "[parameters('packageUri')]"
                }
              }
            ]
          },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_eventhubs_name')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName":  "[parameters('connections_eventhubs_name')]",
                "statuses": [],
                "customParameterValues": {},
                "api": {
                    "name": "eventhubs",
                    "displayName": "Event Hubs",
                    "description": "Connect to Azure Event Hubs to send and receive events.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1568/1.0.1568.2757/eventhubs/icon.png')]",
                    "brandColor": "#c4d5ff",
                   "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/eventhubs')]", 
                   "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": []
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_office365_name')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "office365",
                "statuses": [],
                "customParameterValues": {},
                "nonSecretParameterValues": {},
                "api": {
                    "name": "office365",
                    "displayName": "office365",
                    "description": "Microsoft Office 365 is a cloud-based service that is designed to help meet your organization's needs for robust security, reliability, and user productivity.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1573/1.0.1573.2770/office365/icon.png')]",
                    "brandColor": "#0078D4",
                    "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/office365')]",
                    "type": "Microsoft.Web/locations/managedApis"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_github_name')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('connections_github_name')]",
                "statuses": [],
                "customParameterValues": {},
                "nonSecretParameterValues": {},
                "api": {
                    "name": "[parameters('connections_github_name')]",
                    "displayName": "GitHub",
                    "description": "GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1549/1.0.1549.2680/github/icon.png')]",
                    "brandColor": "#4078c0",
                    "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/github')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": []
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_AutoRemediation_name')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites',parameters('functionAppName'))]",
                "[resourceId('Microsoft.Web/sites/extensions',parameters('functionAppName'),'zipdeploy')]"
              ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "EventName": {
                            "defaultValue": "rotate-secrets",
                            "type": "String"
                        },
                        "KeyVaultName": {
                            "defaultValue": "SecAppKey",
                            "type": "String"
                        },
                        "RepoName": {
                            "defaultValue": "tictactoe",
                            "type": "String"
                        },
                        "RepoOwner": {
                            "defaultValue": "floydkots",
                            "type": "String"
                        },
                        "SecrectName": {
                            "defaultValue": "hackthonDemo",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "When_events_are_available_in_Event_Hub": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 3
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 3
                            },
                            "splitOn": "@triggerBody()",
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['eventhubs']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/@{encodeURIComponent('insights-logs-serviceprincipalriskevents')}/events/batch/head",
                                "queries": {
                                    "consumerGroupName": "$Default",
                                    "contentType": "application/octet-stream",
                                    "maximumEventsCount": 50
                                }
                            }
                        }
                    },
                    "actions": {
                        "For_Each_Risk_Detections": {
                            "foreach": "@body('Parse_Risk_Event')?['records']",
                            "actions": {
                                "Ignore_the_dismissed_risk": {
                                    "actions": {
                                        "Condition": {
                                            "actions": {
                                                "Send_an_email_(V2)_2": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "Body": "<p>application ID:@{items('For_Each_Risk_Detections')?['properties']?['servicePrincipalId']}<br>\nApplication Name: @{items('For_Each_Risk_Detections')?['properties']?['servicePrincipalDisplayName']}<br>\nRisk Detials:@{items('For_Each_Risk_Detections')?['properties']?['riskDetail']}<br>\nGithub repro: @{parameters('RepoOwner')}/@{parameters('RepoName')}<br>\nKeyVaultName: @{parameters('KeyVaultName')}<br>\nSecretName:@{parameters('SecrectName')}</p>",
                                                            "Subject": "The application @{items('For_Each_Risk_Detections')?['properties']?['servicePrincipalDisplayName']} has risk detected",
                                                            "To": "@variables('OwnerEmails')"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/v2/Mail"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Get_all_owners_email": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@variables('OwnerEmails')",
                                                                ""
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Dismiss_the_App_Risk_Event": {
                                            "runAfter": {
                                                "PurgeAppSecrets": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://graph.microsoft.com",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "servicePrincipalIds": [
                                                        "@items('For_Each_Risk_Detections')?['properties']?['servicePrincipalId']"
                                                    ]
                                                },
                                                "method": "POST",
                                                "uri": "https://graph.microsoft.com/beta/identityProtection/riskyServicePrincipals/dismiss"
                                            }
                                        },
                                        "Get_all_owners_email": {
                                            "foreach": "@body('Parse_JSON')?['value']",
                                            "actions": {
                                                "Condition_2": {
                                                    "actions": {
                                                        "Append_to_string_variable": {
                                                            "runAfter": {},
                                                            "type": "AppendToStringVariable",
                                                            "inputs": {
                                                                "name": "OwnerEmails",
                                                                "value": "@{items('Get_all_owners_email')?['mail']};"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@items('Get_all_owners_email')?['mail']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "Graph_API_to_get_owners": {
                                            "runAfter": {
                                                "Dismiss_the_App_Risk_Event": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://graph.microsoft.com",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "method": "GET",
                                                "uri": "https://graph.microsoft.com/v1.0/servicePrincipals/@{items('For_Each_Risk_Detections')?['properties']?['servicePrincipalId']}/owners"
                                            }
                                        },
                                        "Parse_JSON": {
                                            "runAfter": {
                                                "Graph_API_to_get_owners": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Graph_API_to_get_owners')",
                                                "schema": {
                                                    "properties": {
                                                        "@@odata.context": {
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "items": {
                                                                "properties": {
                                                                    "@@odata.type": {
                                                                        "type": "string"
                                                                    },
                                                                    "businessPhones": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "displayName": {
                                                                        "type": "string"
                                                                    },
                                                                    "givenName": {
                                                                        "type": "string"
                                                                    },
                                                                    "id": {
                                                                        "type": "string"
                                                                    },
                                                                    "jobTitle": {},
                                                                    "mail": {},
                                                                    "mobilePhone": {},
                                                                    "officeLocation": {},
                                                                    "preferredLanguage": {},
                                                                    "surname": {
                                                                        "type": "string"
                                                                    },
                                                                    "userPrincipalName": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "@@odata.type",
                                                                    "id",
                                                                    "businessPhones",
                                                                    "displayName",
                                                                    "givenName",
                                                                    "jobTitle",
                                                                    "mail",
                                                                    "mobilePhone",
                                                                    "officeLocation",
                                                                    "preferredLanguage",
                                                                    "surname",
                                                                    "userPrincipalName"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "PurgeAppSecrets": {
                                            "runAfter": {
                                                "Redeployment_with_New_Key": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Function",
                                            "inputs": {
                                                "body": {
                                                    "KeyVaultName": "@parameters('KeyVaultName')",
                                                    "SecretName": "@parameters('SecrectName')"
                                                },
                                                "function": {
                                                    "id": "[concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/functions/PurgeAppSecrets')]"
                                                }
                                            }
                                        },
                                        "Redeployment_with_New_Key": {
                                            "runAfter": {
                                                "SecretRotate": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "event_type": "@parameters('EventName')"
                                                },
                                                "headers": {
                                                    "Accept": "application/vnd.github.v3+json"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['github']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/repos/@{encodeURIComponent(parameters('RepoOwner'))}/@{encodeURIComponent(parameters('RepoName'))}/dispatches"
                                            }
                                        },
                                        "SecretRotate": {
                                            "runAfter": {},
                                            "type": "Function",
                                            "inputs": {
                                                "body": {
                                                    "ApplicationID": "@items('For_Each_Risk_Detections')?['properties']?['servicePrincipalId']",
                                                    "KeyVaultName": "@parameters('KeyVaultName')",
                                                    "SecretName": "@parameters('SecrectName')"
                                                },
                                                "function": {
                                                    "id": "[concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/functions/SecretRotate')]"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@items('For_Each_Risk_Detections')?['properties']?['riskDetail']",
                                                        "dismissed"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_OwnerEmails": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_OwnerEmails": {
                            "runAfter": {
                                "Parse_Risk_Event": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OwnerEmails",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Parse_Risk_Event": {
                            "runAfter": {},
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@decodeBase64(triggerBody()?['ContentData'])",
                                "schema": {
                                    "properties": {
                                        "records": {
                                            "items": {
                                                "properties": {
                                                    "Level": {
                                                        "type": "integer"
                                                    },
                                                    "category": {
                                                        "type": "string"
                                                    },
                                                    "correlationId": {
                                                        "type": "string"
                                                    },
                                                    "durationMs": {
                                                        "type": "integer"
                                                    },
                                                    "identity": {
                                                        "type": "string"
                                                    },
                                                    "location": {
                                                        "type": "string"
                                                    },
                                                    "operationName": {
                                                        "type": "string"
                                                    },
                                                    "operationVersion": {
                                                        "type": "string"
                                                    },
                                                    "properties": {
                                                        "properties": {
                                                            "activity": {
                                                                "type": "string"
                                                            },
                                                            "activityDateTime": {
                                                                "type": "string"
                                                            },
                                                            "additionalInfo": {
                                                                "type": "string"
                                                            },
                                                            "appId": {
                                                                "type": "string"
                                                            },
                                                            "correlationId": {},
                                                            "detectedDateTime": {
                                                                "type": "string"
                                                            },
                                                            "detectionTimingType": {
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "ipAddress": {},
                                                            "keyIds": {
                                                                "type": "array"
                                                            },
                                                            "lastUpdatedDateTime": {
                                                                "type": "string"
                                                            },
                                                            "location": {},
                                                            "requestId": {},
                                                            "riskDetail": {
                                                                "type": "string"
                                                            },
                                                            "riskEventType": {
                                                                "type": "string"
                                                            },
                                                            "riskLevel": {
                                                                "type": "string"
                                                            },
                                                            "riskState": {
                                                                "type": "string"
                                                            },
                                                            "servicePrincipalDisplayName": {
                                                                "type": "string"
                                                            },
                                                            "servicePrincipalId": {
                                                                "type": "string"
                                                            },
                                                            "source": {
                                                                "type": "string"
                                                            },
                                                            "tokenIssuerType": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "resourceId": {
                                                        "type": "string"
                                                    },
                                                    "resultSignature": {
                                                        "type": "string"
                                                    },
                                                    "tenantId": {
                                                        "type": "string"
                                                    },
                                                    "time": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "time",
                                                    "resourceId",
                                                    "operationName",
                                                    "operationVersion",
                                                    "category",
                                                    "tenantId",
                                                    "resultSignature",
                                                    "durationMs",
                                                    "correlationId",
                                                    "identity",
                                                    "Level",
                                                    "location",
                                                    "properties"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "eventhubs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_eventhubs_name'))]",
                                "connectionName": "[parameters('connections_eventhubs_name')]",
                                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/eventhubs')]"
                            },
                            "github": {
                                "connectionId": "[resourceId('Microsoft.Web/connections',parameters('connections_github_name'))]",
                                "connectionName": "[parameters('connections_github_name')]",
                                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/github')]"
                            },
                            "office365": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_office365_name'))]",
                                "connectionName": "[parameters('connections_office365_name')]",
                                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}